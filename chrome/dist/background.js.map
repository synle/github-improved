{"version":3,"sources":["node_modules/simple-gulp-builder/node_modules/browserify/node_modules/browser-pack/_prelude.js","background.js","src/background/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","console","log"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,SCCA,YCDAK,SAAQC,IAAI,qCDwCD","file":"background.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nconsole.log('background page init...');\n\n// function makeRequest(url, data){\n//   var request = new Request(url, {\n//     method: 'GET',\n//     mode: 'cors',\n//     redirect: 'follow',\n//     cache: \"no-cache\",\n//     credentials: \"include\",\n//     headers: new Headers({\n//       'Accept': 'application/vnd.github.v3+json',\n//       'Authorization': `token ${auth_token}`\n//     })\n//   });\n\n//   return new Promise((resolve, reject) => {\n//     let successCall = false;\n//     fetch(request).then(\n//       resp => {\n//         successCall = resp.ok;\n//         return resp.json();\n//       }\n//     ).then(\n//       respObject => {\n//         successCall ? resolve(respObject)\n//           : reject(respObject);\n//       }\n//     )\n//   });\n// }\n\n\n// makeRequest().then(\n//   resp => console.log('SUCCESS', resp),\n//   resp => console.error('ERROR', resp)\n// );\n\n},{}]},{},[1])\n\n","console.log('background page init...');\n\n// function makeRequest(url, data){\n//   var request = new Request(url, {\n//     method: 'GET',\n//     mode: 'cors',\n//     redirect: 'follow',\n//     cache: \"no-cache\",\n//     credentials: \"include\",\n//     headers: new Headers({\n//       'Accept': 'application/vnd.github.v3+json',\n//       'Authorization': `token ${auth_token}`\n//     })\n//   });\n\n//   return new Promise((resolve, reject) => {\n//     let successCall = false;\n//     fetch(request).then(\n//       resp => {\n//         successCall = resp.ok;\n//         return resp.json();\n//       }\n//     ).then(\n//       respObject => {\n//         successCall ? resolve(respObject)\n//           : reject(respObject);\n//       }\n//     )\n//   });\n// }\n\n\n// makeRequest().then(\n//   resp => console.log('SUCCESS', resp),\n//   resp => console.error('ERROR', resp)\n// );\n"]}